#*****************************************************************************************
# Vivado (TM) v2018.3.1 (64-bit)
#
# kc705_mig.tcl: Tcl script for re-creating project 'kc705_mig'
#
# Generated by Vivado on Tue Jan 24 13:59:48 -0600 2023
# IP Build 2486929 on Tue Mar 26 06:44:21 MDT 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (kc705_mig.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/ip/fifo_32to32_width256/fifo_32to32_width256.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/ip/fifo32to32/fifo32to32.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/ip/fifo_160to160_depth2k/fifo_160to160_depth2k.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/GTX/DataExtrater.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/DataFrameSync.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/GTX/SynController.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/4ch_data_stream_controller/datacache.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/GTX/descr30b.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/4ch_data_stream_controller/four_chann_data_stream_controller.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/GTX_4_Channel/gtwizard_4_channel_common.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/GTX_4_Channel/gtwizard_4_channel_common_reset.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/GTX_4_Channel/gtwizard_4_channel_exdes.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/GTX_4_Channel/gtwizard_4_channel_gt_usrclk_source.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/GTX_4_Channel/gtwizard_4_channel_support.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gtx_receiver.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/4ch_data_stream_controller/missedEvtMonitor.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/4ch_data_stream_controller/readoutController.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/new/simple_readout.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/4ch_data_stream_controller/triggerSelect.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/4ch_data_stream_controller/zeroCompress.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/arp.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/arp_cache2.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/bram_dp.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/com5402pkg.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/com5402.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/control_interface.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/gig_eth.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/gig_eth_mac_fifo_block.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/gig_eth_mac_resets.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/global_clock_reset.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/global_resetter.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/i2c/i2c_master.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/i2c/i2c_wr_bytes.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/packet_parsing.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/ping.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/tcp_rxbufndemux2.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/tcp_server.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/tcp_tx.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/tcp_txbuf.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/timer_4us.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/axi_lite_sm/tri_mode_ethernet_mac_0_axi_lite_sm.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/fifo/tri_mode_ethernet_mac_0_bram_tdp.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/common/tri_mode_ethernet_mac_0_reset_sync.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/fifo/tri_mode_ethernet_mac_0_rx_client_fifo.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/support/tri_mode_ethernet_mac_0_support.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/support/tri_mode_ethernet_mac_0_support_clocking.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/support/tri_mode_ethernet_mac_0_support_resets.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/common/tri_mode_ethernet_mac_0_sync_block.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/fifo/tri_mode_ethernet_mac_0_ten_100_1g_eth_fifo.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/KC705/fifo/tri_mode_ethernet_mac_0_tx_client_fifo.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/udp2serial.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/udp_rx.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/udp_tx.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/gig_eth/tcp_server/whois2.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/new/kc705_mig.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/new/create_input_data.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/pulse2pulse.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/sdram/sdram_buffer_fifo.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/src/sdram/KC705/sdram_ddr3.vhd"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/mig_7series_0/mig_a.prj"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/fifo512to128/fifo512to128.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/fifo256to512/fifo256to512.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/ila_0/ila_0.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/mig_7series_0/mig_7series_0.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/ip/fifo_32to256/fifo_32to256.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/tri_mode_ethernet_mac_0/tri_mode_ethernet_mac_0.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/fifo8to32/fifo8to32.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/fifo32to8/fifo32to8.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/fifo128to32/fifo128to32.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/ip/vio_0/vio_0.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/fifo36x512/fifo36x512.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/ipcore_dir/clockwiz/clockwiz.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/ip/gtwizard_4_channel/gtwizard_4_channel.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sources_1/ip/vio_1/vio_1.xci"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/constrs_1/new/top_KC705.xdc"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/constrs_1/new/FMC_kc705_mig.xdc"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/constrs_1/new/kc705_GTX.xdc"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sim_1/new/simple_readout_tb.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sim_1/new/i2c_wr_bytes_tb.v"
#    "C:/Users/dtgong/Documents/ETROC2/gitlab/etroc2testfirmware/kc705_mig.srcs/sim_1/new/create_input_data_tb.v"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "kc705_mig"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "kc705_mig.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7k325tffg900-2

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "xilinx.com:kc705:part0:1.3" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.accelerator_binary_content" -value "bitstream" -objects $obj
set_property -name "dsa.accelerator_binary_format" -value "xclbin2" -objects $obj
set_property -name "dsa.board_id" -value "kc705" -objects $obj
set_property -name "dsa.description" -value "Vivado generated DSA" -objects $obj
set_property -name "dsa.dr_bd_base_address" -value "0" -objects $obj
set_property -name "dsa.emu_dir" -value "emu" -objects $obj
set_property -name "dsa.flash_interface_type" -value "bpix16" -objects $obj
set_property -name "dsa.flash_offset_address" -value "0" -objects $obj
set_property -name "dsa.flash_size" -value "1024" -objects $obj
set_property -name "dsa.host_architecture" -value "x86_64" -objects $obj
set_property -name "dsa.host_interface" -value "pcie" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "dsa.platform_state" -value "pre_synth" -objects $obj
set_property -name "dsa.vendor" -value "xilinx" -objects $obj
set_property -name "dsa.version" -value "0.0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "disable" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "62" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "62" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "62" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "62" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "62" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "62" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "62" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "112" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/ip/fifo_32to32_width256/fifo_32to32_width256.xci" ]\
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/ip/fifo32to32/fifo32to32.xci" ]\
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/ip/fifo_160to160_depth2k/fifo_160to160_depth2k.xci" ]\
 [file normalize "${origin_dir}/src/GTX/DataExtrater.v" ]\
 [file normalize "${origin_dir}/src/DataFrameSync.v" ]\
 [file normalize "${origin_dir}/src/GTX/SynController.v" ]\
 [file normalize "${origin_dir}/src/4ch_data_stream_controller/datacache.v" ]\
 [file normalize "${origin_dir}/src/GTX/descr30b.v" ]\
 [file normalize "${origin_dir}/src/4ch_data_stream_controller/four_chann_data_stream_controller.v" ]\
 [file normalize "${origin_dir}/src/GTX_4_Channel/gtwizard_4_channel_common.v" ]\
 [file normalize "${origin_dir}/src/GTX_4_Channel/gtwizard_4_channel_common_reset.v" ]\
 [file normalize "${origin_dir}/src/GTX_4_Channel/gtwizard_4_channel_exdes.v" ]\
 [file normalize "${origin_dir}/src/GTX_4_Channel/gtwizard_4_channel_gt_usrclk_source.v" ]\
 [file normalize "${origin_dir}/src/GTX_4_Channel/gtwizard_4_channel_support.v" ]\
 [file normalize "${origin_dir}/src/gtx_receiver.v" ]\
 [file normalize "${origin_dir}/src/4ch_data_stream_controller/missedEvtMonitor.v" ]\
 [file normalize "${origin_dir}/src/4ch_data_stream_controller/readoutController.v" ]\
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/new/simple_readout.v" ]\
 [file normalize "${origin_dir}/src/4ch_data_stream_controller/triggerSelect.v" ]\
 [file normalize "${origin_dir}/src/4ch_data_stream_controller/zeroCompress.v" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/arp.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/arp_cache2.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/bram_dp.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/com5402pkg.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/com5402.vhd" ]\
 [file normalize "${origin_dir}/src/control_interface.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/gig_eth.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/gig_eth_mac_fifo_block.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/gig_eth_mac_resets.vhd" ]\
 [file normalize "${origin_dir}/src/global_clock_reset.vhd" ]\
 [file normalize "${origin_dir}/src/global_resetter.vhd" ]\
 [file normalize "${origin_dir}/src/i2c/i2c_master.vhd" ]\
 [file normalize "${origin_dir}/src/i2c/i2c_wr_bytes.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/packet_parsing.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/ping.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/tcp_rxbufndemux2.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/tcp_server.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/tcp_tx.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/tcp_txbuf.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/timer_4us.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/axi_lite_sm/tri_mode_ethernet_mac_0_axi_lite_sm.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/fifo/tri_mode_ethernet_mac_0_bram_tdp.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/common/tri_mode_ethernet_mac_0_reset_sync.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/fifo/tri_mode_ethernet_mac_0_rx_client_fifo.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/support/tri_mode_ethernet_mac_0_support.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/support/tri_mode_ethernet_mac_0_support_clocking.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/support/tri_mode_ethernet_mac_0_support_resets.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/common/tri_mode_ethernet_mac_0_sync_block.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/fifo/tri_mode_ethernet_mac_0_ten_100_1g_eth_fifo.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/KC705/fifo/tri_mode_ethernet_mac_0_tx_client_fifo.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/udp2serial.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/udp_rx.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/udp_tx.vhd" ]\
 [file normalize "${origin_dir}/src/gig_eth/tcp_server/whois2.vhd" ]\
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/new/kc705_mig.v" ]\
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/new/create_input_data.v" ]\
 [file normalize "${origin_dir}/src/pulse2pulse.vhd" ]\
 [file normalize "${origin_dir}/src/sdram/sdram_buffer_fifo.vhd" ]\
 [file normalize "${origin_dir}/src/sdram/KC705/sdram_ddr3.vhd" ]\
 [file normalize "${origin_dir}/ipcore_dir/mig_7series_0/mig_a.prj" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "fifo_32to32_width256/fifo_32to32_width256.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "fifo32to32/fifo32to32.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "fifo_160to160_depth2k/fifo_160to160_depth2k.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "tcp_server/arp.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/arp_cache2.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/bram_dp.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/com5402pkg.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/com5402.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "src/control_interface.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "KC705/gig_eth.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "KC705/gig_eth_mac_fifo_block.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "KC705/gig_eth_mac_resets.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "src/global_clock_reset.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "src/global_resetter.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "i2c/i2c_master.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "i2c/i2c_wr_bytes.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/packet_parsing.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/ping.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/tcp_rxbufndemux2.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/tcp_server.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/tcp_tx.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/tcp_txbuf.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/timer_4us.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "axi_lite_sm/tri_mode_ethernet_mac_0_axi_lite_sm.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "fifo/tri_mode_ethernet_mac_0_bram_tdp.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "common/tri_mode_ethernet_mac_0_reset_sync.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "fifo/tri_mode_ethernet_mac_0_rx_client_fifo.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "support/tri_mode_ethernet_mac_0_support.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "support/tri_mode_ethernet_mac_0_support_clocking.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "support/tri_mode_ethernet_mac_0_support_resets.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "common/tri_mode_ethernet_mac_0_sync_block.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "fifo/tri_mode_ethernet_mac_0_ten_100_1g_eth_fifo.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "fifo/tri_mode_ethernet_mac_0_tx_client_fifo.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/udp2serial.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/udp_rx.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/udp_tx.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "tcp_server/whois2.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "new/kc705_mig.v"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "library" -value "work" -objects $file_obj

set file "src/pulse2pulse.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "sdram/sdram_buffer_fifo.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "KC705/sdram_ddr3.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "mig_7series_0/mig_a.prj"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "scoped_to_cells" -value "mig_7series_0" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "kc705_mig" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/fifo512to128/fifo512to128.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "fifo512to128/fifo512to128.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/fifo256to512/fifo256to512.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "fifo256to512/fifo256to512.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/ila_0/ila_0.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "ila_0/ila_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/mig_7series_0/mig_7series_0.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "mig_7series_0/mig_7series_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/ip/fifo_32to256/fifo_32to256.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "fifo_32to256/fifo_32to256.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/tri_mode_ethernet_mac_0/tri_mode_ethernet_mac_0.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "tri_mode_ethernet_mac_0/tri_mode_ethernet_mac_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/fifo8to32/fifo8to32.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "fifo8to32/fifo8to32.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/fifo32to8/fifo32to8.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "fifo32to8/fifo32to8.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/fifo128to32/fifo128to32.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "fifo128to32/fifo128to32.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/ip/vio_0/vio_0.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "vio_0/vio_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/fifo36x512/fifo36x512.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "fifo36x512/fifo36x512.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/ipcore_dir/clockwiz/clockwiz.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "clockwiz/clockwiz.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/ip/gtwizard_4_channel/gtwizard_4_channel.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "gtwizard_4_channel/gtwizard_4_channel.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/kc705_mig.srcs/sources_1/ip/vio_1/vio_1.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "vio_1/vio_1.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/kc705_mig.srcs/constrs_1/new/top_KC705.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "new/top_KC705.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/kc705_mig.srcs/constrs_1/new/FMC_kc705_mig.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "new/FMC_kc705_mig.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/kc705_mig.srcs/constrs_1/new/kc705_GTX.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "new/kc705_GTX.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_constrs_file" -value "[get_files *new/top_KC705.xdc]" -objects $obj
set_property -name "target_ucf" -value "[get_files *new/top_KC705.xdc]" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/kc705_mig.srcs/sim_1/new/simple_readout_tb.v" ]\
 [file normalize "${origin_dir}/kc705_mig.srcs/sim_1/new/i2c_wr_bytes_tb.v" ]\
 [file normalize "${origin_dir}/kc705_mig.srcs/sim_1/new/create_input_data_tb.v" ]\
]
set imported_files [import_files -fileset sim_1 $files]

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "simple_readout_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj
set_property -name "xsim.simulate.runtime" -value "8000000ns" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7k325tffg900-2 -flow {Vivado Synthesis 2016} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2016" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "synth_1_synth_report_utilization_0" -objects $obj

}
set obj [get_runs synth_1]
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7k325tffg900-2 -flow {Vivado Implementation 2016} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2016" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_init_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_opt_report_drc_0" -objects $obj

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_power_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_place_report_io_0" -objects $obj

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_place_report_utilization_0" -objects $obj

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_place_report_control_sets_0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_place_report_incremental_reuse_0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_place_report_incremental_reuse_1" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_place_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_post_place_power_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "display_name" -value "impl_1_phys_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_drc_0" -objects $obj

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_methodology_0" -objects $obj

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_power_0" -objects $obj

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_route_status_0" -objects $obj

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_incremental_reuse_0" -objects $obj

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_clock_utilization_0" -objects $obj

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_route_report_bus_skew_0" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_post_route_phys_opt_report_timing_summary_0" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "display_name" -value "impl_1_post_route_phys_opt_report_bus_skew_0" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
set obj [get_dashboards default_dashboard]

# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
# Set current dashboard to 'default_dashboard' 
current_dashboard default_dashboard 
